name: Test

on:
  pull_request:
    branches:
      - master
  workflow_dispatch:

env:
  FOUNDRY_PROFILE: ci
  INFURA_API_KEY: ${{ secrets.INFURA_API_KEY }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-test:
    strategy:
      fail-fast: true

    name: Forge Project
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          submodules: recursive

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly-d14a7b44fc439407d761fccc4c1637216554bbb6

      - name: Run Forge build
        run: |
          forge --version
          forge soldeer install --clean
          forge build --sizes
        id: build

      - name: Run Forge tests
        run: |
          make test
        id: test

      # - name: Soldeer Publish
      #   run: make soldeer-publish
      #   id: soldeer-publish
  
  check-template:
    name: Check Template
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          fetch-depth: 0

      - name: Check Template
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

          # Checkout the HEAD of the current branch
          git checkout ${{ github.head_ref || github.ref_name }}

          # Store the current commit hash
          CURRENT_COMMIT=$(git rev-parse HEAD)
          
          # Perform the sync
          make sync

          # Check for conflicts
          if git status | grep -q 'both modified:'; then
            echo "Error: Conflicts detected during sync."
            echo "Please resolve conflicts manually and commit the changes before proceeding."
            exit 1
          fi
          
          # Get the new commit hash after sync
          NEW_COMMIT=$(git rev-parse HEAD)
          
          # Compare the commit hashes
          if [ "$CURRENT_COMMIT" != "$NEW_COMMIT" ]; then
            echo "Error: The repository is not up to date with the template."
            echo "Please sync with the template and commit the changes before proceeding."
            exit 1
          fi
          
          echo "Repository is up to date with the template."
